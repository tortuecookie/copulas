[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "A crash course on copulas",
    "section": "",
    "text": "This website is a crash course on copulas, focused on the practical implementation using R. I did it initially as a cheat sheet for myself, but I hope it can be useful for you as well ðŸ˜‰.\nThis website was built and published to Github Pages using quarto."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Created by a passionate actuary ðŸ˜€!"
  },
  {
    "objectID": "index.html#definition",
    "href": "index.html#definition",
    "title": "The bivariate Gumbel copula",
    "section": "2 Definition",
    "text": "2 Definition\nThe bivariate Gumbel copula with parameter \\(\\theta \\ge 1\\) is defined by, for all \\((u,v)\\in ]0,1]^2\\), \\[\nC_{\\theta}\\left( u, v \\right) = \\exp\\left( - \\left( \\left( -\\ln(u) \\right)^{\\theta} + \\left( -\\ln(v)\\right)^{\\theta} \\right)^{\\frac{1}{\\theta}} \\right)\n\\]"
  },
  {
    "objectID": "index.html#kendalls-tau",
    "href": "index.html#kendalls-tau",
    "title": "The bivariate Gumbel copula",
    "section": "3 Kendallâ€™s tau",
    "text": "3 Kendallâ€™s tau\nThe Kendallâ€™s tau of the bivariate Gumbel copula with parameter \\(\\theta \\ge 1\\) is equal to \\[\n1 - \\frac{1}{\\theta}\n\\]"
  },
  {
    "objectID": "index.html#coefficient-of-upper-tail-dependency",
    "href": "index.html#coefficient-of-upper-tail-dependency",
    "title": "The bivariate Gumbel copula",
    "section": "4 Coefficient of upper tail dependency",
    "text": "4 Coefficient of upper tail dependency\nThe coefficient of upper tail dependency of the bivariate Gumbel copula with parameter \\(\\theta \\ge 1\\) is equal to \\[\n2 - 2^{\\frac{1}{\\theta}}\n\\]"
  },
  {
    "objectID": "index.html#coefficient-of-lower-tail-dependency",
    "href": "index.html#coefficient-of-lower-tail-dependency",
    "title": "The bivariate Gumbel copula",
    "section": "5 Coefficient of lower tail dependency",
    "text": "5 Coefficient of lower tail dependency\nThe coefficient of lower tail dependency of the bivariate Gumbel copula with parameter \\(\\theta \\ge 1\\) is equal to \\(0\\)."
  },
  {
    "objectID": "index.html#simulation-with-r",
    "href": "index.html#simulation-with-r",
    "title": "The bivariate Gumbel copula",
    "section": "6 Simulation with R",
    "text": "6 Simulation with R\nThe following script creates simulations of the bivariate Gumbel copula with R using the copula package, and prints the first 10 simulations.\n\n# Install the copula package if you haven't already\n# install.packages(\"copula\")\n# Load the copula package\nlibrary(copula)\n\n# Define the parameter for the Gumbel copula (e.g., theta = 6)\ntheta &lt;- 6\n\n# Create a Gumbel copula object\ngumbel_copula &lt;- gumbelCopula(theta, dim = 2)\n\n# Generate random samples from the Gumbel copula\nn_samples &lt;- 1000  # Number of samples\nset.seed(1) # Set the seed to ensure that the results are reproducible\nsamples &lt;- rCopula(n_samples, gumbel_copula)\n\n# Print the first few samples\nhead(samples, n = 10)\n\n            [,1]        [,2]\n [1,] 0.19898596 0.224083220\n [2,] 0.81121317 0.786621135\n [3,] 0.89816385 0.888828402\n [4,] 0.09080203 0.039999714\n [5,] 0.34837004 0.746533513\n [6,] 0.52643061 0.685182220\n [7,] 0.94393942 0.937099907\n [8,] 0.82127474 0.905473421\n [9,] 0.27723119 0.415820543\n[10,] 0.02030906 0.005701014\n\n\nThe following script plots the simulations with R using the plotly package, which creates interactive graphs.\n\n# Install the plotly package if you haven't already\n# install.packages(\"plotly\")\n# Load the plotly package\nlibrary(\"plotly\")\n\n# Convert the samples matrix to a data frame for plotly\ndf &lt;- as.data.frame(samples)\n\n# Rename the columns for clarity (optional)\ncolnames(df) &lt;- c(\"X\", \"Y\")\n\n# Create a dynamic scatter plot with plotly\nplot_ly(df, x = ~X, y = ~Y, type = 'scatter') %&gt;%\nlayout(title = list(text = \"Bivariate Gumbel copula samples - theta = 6\"),\n  xaxis = list(title = \"X-axis (Column 1)\"),\n  yaxis = list(title = \"Y-axis (Column 2)\")\n)"
  },
  {
    "objectID": "index.html#introduction",
    "href": "index.html#introduction",
    "title": "A crash course on copulas",
    "section": "",
    "text": "This website is a crash course on copulas, focused on the practical implementation using R. I did it initially as a cheat sheet for myself, but I hope it can be useful for you as well ðŸ˜‰.\nThis website was built and published to Github Pages using quarto."
  },
  {
    "objectID": "gumbel.html",
    "href": "gumbel.html",
    "title": "A crash course on copulas",
    "section": "",
    "text": "The bivariate Gumbel copula with parameter \\(\\theta \\ge 1\\) is defined by, for all \\((u,v)\\in ]0,1]^2\\), \\[\nC_{\\theta}\\left( u, v \\right) = \\exp\\left( - \\left( \\left( -\\ln(u) \\right)^{\\theta} + \\left( -\\ln(v)\\right)^{\\theta} \\right)^{\\frac{1}{\\theta}} \\right)\n\\]"
  },
  {
    "objectID": "gumbel.html#definition",
    "href": "gumbel.html#definition",
    "title": "A crash course on copulas",
    "section": "",
    "text": "The bivariate Gumbel copula with parameter \\(\\theta \\ge 1\\) is defined by, for all \\((u,v)\\in ]0,1]^2\\), \\[\nC_{\\theta}\\left( u, v \\right) = \\exp\\left( - \\left( \\left( -\\ln(u) \\right)^{\\theta} + \\left( -\\ln(v)\\right)^{\\theta} \\right)^{\\frac{1}{\\theta}} \\right)\n\\]"
  },
  {
    "objectID": "gumbel.html#kendalls-tau",
    "href": "gumbel.html#kendalls-tau",
    "title": "A crash course on copulas",
    "section": "2 Kendallâ€™s tau",
    "text": "2 Kendallâ€™s tau\nThe Kendallâ€™s tau of the bivariate Gumbel copula with parameter \\(\\theta \\ge 1\\) is equal to \\[\n1 - \\frac{1}{\\theta}\n\\]"
  },
  {
    "objectID": "gumbel.html#coefficient-of-upper-tail-dependency",
    "href": "gumbel.html#coefficient-of-upper-tail-dependency",
    "title": "A crash course on copulas",
    "section": "3 Coefficient of upper tail dependency",
    "text": "3 Coefficient of upper tail dependency\nThe coefficient of upper tail dependency of the bivariate Gumbel copula with parameter \\(\\theta \\ge 1\\) is equal to \\[\n2 - 2^{\\frac{1}{\\theta}}\n\\]"
  },
  {
    "objectID": "gumbel.html#coefficient-of-lower-tail-dependency",
    "href": "gumbel.html#coefficient-of-lower-tail-dependency",
    "title": "A crash course on copulas",
    "section": "4 Coefficient of lower tail dependency",
    "text": "4 Coefficient of lower tail dependency\nThe coefficient of lower tail dependency of the bivariate Gumbel copula with parameter \\(\\theta \\ge 1\\) is equal to \\(0\\)."
  },
  {
    "objectID": "gumbel.html#simulation-with-r",
    "href": "gumbel.html#simulation-with-r",
    "title": "A crash course on copulas",
    "section": "5 Simulation with R",
    "text": "5 Simulation with R\nThe following script creates simulations of the bivariate Gumbel copula with R using the copula package, and prints the first 10 simulations.\n\n# Install the copula package if you haven't already\n# install.packages(\"copula\")\n# Load the copula package\nlibrary(copula)\n\n# Define the parameter for the Gumbel copula (e.g., theta = 6)\ntheta &lt;- 6\n\n# Create a Gumbel copula object\ngumbel_copula &lt;- gumbelCopula(theta, dim = 2)\n\n# Generate random samples from the Gumbel copula\nn_samples &lt;- 1000  # Number of samples\nset.seed(1) # Set the seed to ensure that the results are reproducible\nsamples &lt;- rCopula(n_samples, gumbel_copula)\n\n# Print the first few samples\nhead(samples, n = 10)\n\n            [,1]        [,2]\n [1,] 0.19898596 0.224083220\n [2,] 0.81121317 0.786621135\n [3,] 0.89816385 0.888828402\n [4,] 0.09080203 0.039999714\n [5,] 0.34837004 0.746533513\n [6,] 0.52643061 0.685182220\n [7,] 0.94393942 0.937099907\n [8,] 0.82127474 0.905473421\n [9,] 0.27723119 0.415820543\n[10,] 0.02030906 0.005701014\n\n\nThe following script plots the simulations with R using the plotly package, which creates interactive graphs.\n\n# Install the plotly package if you haven't already\n# install.packages(\"plotly\")\n# Load the plotly package\nlibrary(\"plotly\")\n\n# Convert the samples matrix to a data frame for plotly\ndf &lt;- as.data.frame(samples)\n\n# Rename the columns for clarity (optional)\ncolnames(df) &lt;- c(\"X\", \"Y\")\n\n# Create a dynamic scatter plot with plotly\nplot_ly(df, x = ~X, y = ~Y, type = 'scatter') %&gt;%\nlayout(title = list(text = \"Bivariate Gumbel copula samples - theta = 6\"),\n  xaxis = list(title = \"X-axis (Column 1)\"),\n  yaxis = list(title = \"Y-axis (Column 2)\")\n)"
  },
  {
    "objectID": "index.html#plan",
    "href": "index.html#plan",
    "title": "A crash course on copulas",
    "section": "2 Plan",
    "text": "2 Plan\n\nEssential theoretical results\n\nSklarâ€™s theorem: here\nEstimation: â€¦\nThe rank re-ordering algorithm: here\n\nImportant families of copulas\n\nGaussian: â€¦\nStudent: â€¦\nGumbel: here\nClayton: here\n\n\nPlease reach out if you spot typos or errors!"
  },
  {
    "objectID": "index.html#references",
    "href": "index.html#references",
    "title": "A crash course on copulas",
    "section": "3 References",
    "text": "3 References\nI used the references below to write this course:\n\nâ€¦\nâ€¦"
  },
  {
    "objectID": "clayton.html",
    "href": "clayton.html",
    "title": "A crash course on copulas",
    "section": "",
    "text": "The bivariate Clayton copula with parameter \\(\\theta &gt; 0\\) is defined by, for all \\((u,v)\\in ]0,1]^2\\), \\[\nC_{\\theta}\\left( u, v \\right) = \\left( u^{-\\theta} + v^{-\\theta} - 1  \\right)^{- \\frac{1}{\\theta}}\n\\]"
  },
  {
    "objectID": "clayton.html#definition",
    "href": "clayton.html#definition",
    "title": "A crash course on copulas",
    "section": "",
    "text": "The bivariate Clayton copula with parameter \\(\\theta &gt; 0\\) is defined by, for all \\((u,v)\\in ]0,1]^2\\), \\[\nC_{\\theta}\\left( u, v \\right) = \\left( u^{-\\theta} + v^{-\\theta} - 1  \\right)^{- \\frac{1}{\\theta}}\n\\]"
  },
  {
    "objectID": "clayton.html#kendalls-tau",
    "href": "clayton.html#kendalls-tau",
    "title": "A crash course on copulas",
    "section": "2 Kendallâ€™s tau",
    "text": "2 Kendallâ€™s tau\nThe Kendallâ€™s tau of the bivariate Clayton copula with parameter \\(\\theta &gt; 0\\) is equal to \\[\n\\frac{\\theta}{2 + \\theta}\n\\]"
  },
  {
    "objectID": "clayton.html#coefficient-of-upper-tail-dependency",
    "href": "clayton.html#coefficient-of-upper-tail-dependency",
    "title": "A crash course on copulas",
    "section": "3 Coefficient of upper tail dependency",
    "text": "3 Coefficient of upper tail dependency\nThe coefficient of upper tail dependency of the bivariate Clayton copula with parameter \\(\\theta &gt; 0\\) is equal to \\(0\\)."
  },
  {
    "objectID": "clayton.html#coefficient-of-lower-tail-dependency",
    "href": "clayton.html#coefficient-of-lower-tail-dependency",
    "title": "A crash course on copulas",
    "section": "4 Coefficient of lower tail dependency",
    "text": "4 Coefficient of lower tail dependency\nThe coefficient of lower tail dependency of the bivariate Clayton copula with parameter \\(\\theta \\ge 1\\) is equal to \\[\n2^{-\\frac{1}{\\theta}}\n\\]"
  },
  {
    "objectID": "clayton.html#simulation-with-r",
    "href": "clayton.html#simulation-with-r",
    "title": "A crash course on copulas",
    "section": "5 Simulation with R",
    "text": "5 Simulation with R\nThe following script creates simulations of the bivariate Clayton copula with R using the copula package, and prints the first 10 simulations.\n\n# Install the copula package if you haven't already\n# install.packages(\"copula\")\n# Load the copula package\nlibrary(copula)\n\n# Define the parameter for the Clayton copula (e.g., theta = 2)\ntheta &lt;- 2\n\n# Create a Clayton copula object\nclayton_copula &lt;- claytonCopula(theta, dim = 2)\n\n# Generate random samples from the Clayton copula\nn_samples &lt;- 1000  # Number of samples\nset.seed(1) # Set the seed to ensure that the results are reproducible\nsamples &lt;- rCopula(n_samples, clayton_copula)\n\n# Print the first few samples\nhead(samples, n = 10)\n\n            [,1]      [,2]\n [1,] 0.26550866 0.3439581\n [2,] 0.37212390 0.5704530\n [3,] 0.57285336 0.5179257\n [4,] 0.90820779 0.9816186\n [5,] 0.20168193 0.1129381\n [6,] 0.89838968 0.3083687\n [7,] 0.94467527 0.7790627\n [8,] 0.66079779 0.7056083\n [9,] 0.62911404 0.8727046\n[10,] 0.06178627 0.1074825\n\n\nThe following script plots the simulations with R using the plotly package, which creates interactive graphs.\n\n# Install the plotly package if you haven't already\n# install.packages(\"plotly\")\n# Load the plotly package\nlibrary(\"plotly\")\n\n# Convert the samples matrix to a data frame for plotly\ndf &lt;- as.data.frame(samples)\n\n# Rename the columns for clarity (optional)\ncolnames(df) &lt;- c(\"X\", \"Y\")\n\n# Create a dynamic scatter plot with plotly\nplot_ly(df, x = ~X, y = ~Y, type = 'scatter') %&gt;%\nlayout(title = list(text = \"Bivariate Clayton copula samples - theta = 2\"),\n  xaxis = list(title = \"X-axis (Column 1)\"),\n  yaxis = list(title = \"Y-axis (Column 2)\")\n)"
  },
  {
    "objectID": "sklar.html",
    "href": "sklar.html",
    "title": "A crash course on copulas",
    "section": "",
    "text": "Let \\(\\mathbf{X} = \\left(X_1, ..., X_n\\right)\\), \\(n \\in \\mathbf{N}^{*}, n \\geq 2\\), be a random vector with values in \\(\\mathbf{R}^n\\), with joint distribution function \\(F_{\\mathbf{X}}\\) and marginal distribution functions \\(F_{X_1}, ..., F_{X_n}\\).\nThen, there exists a copula \\(C\\), i.e., a multivariate cumulative distribution function on the unit cube \\([0, 1]^n\\) with uniform marginals, such that, for all \\((x_1, ..., x_n) \\in \\mathbf{R}^n\\):\n\\[\nF_{\\mathbf{X}}(x_1, ..., x_n) = C(F_{X_1}(x_1), ..., F_{X_n}(x_n)),\n\\]"
  },
  {
    "objectID": "sklar.html#inverse-of-sklars-theorem",
    "href": "sklar.html#inverse-of-sklars-theorem",
    "title": "A crash course on copulas",
    "section": "2 Inverse of Sklarâ€™s Theorem",
    "text": "2 Inverse of Sklarâ€™s Theorem\nUsing the same notation as above, if the marginals \\(F_{X_1}, ..., F_{X_n}\\) are continuous, the copula \\(C\\) is unique and can be expressed as, for all \\((u_1, ..., u_n) \\in [0,1]^n\\):\n\\[\nC(u_1, ..., u_n) = F_{\\mathbf{X}}(F_{X_1}^{-1}(u_1), ..., F_{X_n}^{-1}(u_n)).\n\\]\nwhere, for all \\(i \\in \\{1, ..., n\\}\\), \\(F_{X_i}^{-1}\\) is the inverse of the marginal distribution function of \\(X_i\\)."
  },
  {
    "objectID": "sklar.html#key-properties-of-copulas",
    "href": "sklar.html#key-properties-of-copulas",
    "title": "1 Sklarâ€™s Theorem",
    "section": "",
    "text": "Invariance to Marginal Distributions: Copulas separate the marginal behavior of random variables from their dependence structure.\nArchimedean Copulas: A popular family of copulas used in applications are Archimedean copulas, which are expressed as: \\[\nC(u_1, u_2, \\dots, u_n) = \\phi^{-1}(\\phi(u_1) + \\phi(u_2) + \\dots + \\phi(u_n)),\n\\] where \\(\\phi\\) is a continuous, strictly decreasing function called a generator."
  },
  {
    "objectID": "rank_reordering.html",
    "href": "rank_reordering.html",
    "title": "A crash course on copulas",
    "section": "",
    "text": "We explore how to adjust independent simulations from marginal distributions in order to impose a desired dependence structure using a copula. This is useful when you have simulations from marginal distributions produced independently, but want to introduce a correlation structure between them using a copula chosen separately.\nThis is particularly relevant in the context of internal models for (re-)insurers, where individual risk types are typically modelled separately (by separate teams), and the risk aggregation is performed in a second step.\nWe note:\n\n\\(\\mathbf{X} = \\left( X_1, ..., X_n\\right)\\), \\(n \\in \\mathbf{N}^*\\), \\(n \\geq 2\\), a multivariate real-valued random vector\n\\(F_{X_i}\\) the marginal c.d.f. of \\(X_i\\) for all \\(i \\in \\{ 1, ..., n\\}\\)\n\\(C\\) the copula of \\(\\mathbf{X}\\)\n\nWe assume that we have simulations \\(\\left( x_{1,j}, ..., x_{n,j}\\right), j \\in \\{ 1, ..., S\\}\\), \\(S \\in \\mathbf{N}^*\\) being the number of simulations, generated with the expected marginal distributions \\(F_{X_1}, ..., F_{X_n}\\), but under the assumption that the vector components \\(X_1, ..., X_n\\) are independent.\nWe would like to adjust the simulations, so that the dependency structure between the vector components, i.e., the copula \\(C\\), is properly reflected.\nThe solution involves re-ordering the ranks of the simulations of the marginal distributions based on the ranks of samples from the copula."
  },
  {
    "objectID": "rank_reordering.html#steps",
    "href": "rank_reordering.html#steps",
    "title": "A crash course on copulas",
    "section": "2 Steps",
    "text": "2 Steps\nThe algorithm works as follows: 1. Step 1: a. Generate \\(S\\) simulations from the copula (i.e., as many simulations as produced for the marginal distributions) b. These copula samples will have uniforma marginals that have the desired dependence structure 2. Step 2: a. For each vector component, i.e., for each \\(i \\in \\{1, ..., n\\}\\), sort the simulations of \\(X_i\\), i.e., the \\(x_{i,j}, j\\in \\{ 1, ..., S\\}\\), and assign ranks to them b. These ranks will be used to reorder the samples according to the dependence structure imposed by the copula 3. Step 3: a. After generating the copula samples, re-order the marginal simulations to match the ranks of the copula samples This step introduces the dependence between the variables while preserving their marginal distributions"
  },
  {
    "objectID": "rank_reordering.html#r-code-example",
    "href": "rank_reordering.html#r-code-example",
    "title": "A crash course on copulas",
    "section": "3 R Code Example",
    "text": "3 R Code Example\nBelow is an R code snippet that demonstrates this process using independent normal and exponential distributions, with a Gaussian copula to introduce dependence.\n\n# Load required libraries\nlibrary(MASS)   # For mvrnorm\nlibrary(copula) # For copula functions\n\n# Step 1: Generate independent marginals\nset.seed(123)\nn &lt;- 100\nX1 &lt;- rnorm(n, mean = 0, sd = 1)        # Simulate from normal distribution\nX2 &lt;- rexp(n, rate = 1)                 # Simulate from exponential distribution\n\n# Step 2: Simulate from a Gaussian copula with correlation = 0.6\nrho &lt;- 0.6\nsigma &lt;- matrix(c(1, rho, rho, 1), 2, 2)  # Correlation matrix\ncopula_samples &lt;- mvrnorm(n, mu = c(0, 0), Sigma = sigma)\n\n# Convert to uniform samples using the normal CDF\nU1 &lt;- pnorm(copula_samples[, 1])\nU2 &lt;- pnorm(copula_samples[, 2])\n\n# Step 3: Rank the copula samples\nrank_U1 &lt;- rank(U1)\nrank_U2 &lt;- rank(U2)\n\n# Step 4: Sort the independent marginals\nsorted_X1 &lt;- sort(X1)\nsorted_X2 &lt;- sort(X2)\n\n# Step 5: Reorder the marginals according to the copula ranks\nX1_new &lt;- sorted_X1[rank_U1]\nX2_new &lt;- sorted_X2[rank_U2]\n\n# Now X1_new and X2_new have the desired dependence structure from the copula\n# You can inspect the rank correlation between X1_new and X2_new\ncor(X1_new, X2_new, method = \"spearman\")  # Check rank correlation\n\n[1] 0.6105251"
  },
  {
    "objectID": "rank_reordering.html#problem-setup",
    "href": "rank_reordering.html#problem-setup",
    "title": "A crash course on copulas",
    "section": "1 Problem Setup",
    "text": "1 Problem Setup\n\nIndependent simulations: You have independent simulations from the marginal distributions of \\(X_1, X_2, \\dots, X_n\\)\nRequired dependency structure: You want to introduce a dependency structure between the marginals via a given copula.\n\nThe solution involves re-ordering the ranks of the simulations of the marginal distributions based on the ranks of samples from the copula."
  },
  {
    "objectID": "sklar.html#sklars-theorem",
    "href": "sklar.html#sklars-theorem",
    "title": "A crash course on copulas",
    "section": "",
    "text": "Let \\(\\mathbf{X} = \\left(X_1, ..., X_n\\right)\\), \\(n \\in \\mathbf{N}^{*}, n \\geq 2\\), be a random vector with values in \\(\\mathbf{R}^n\\), with joint distribution function \\(F_{\\mathbf{X}}\\) and marginal distribution functions \\(F_{X_1}, ..., F_{X_n}\\).\nThen, there exists a copula \\(C\\), i.e., a multivariate cumulative distribution function on the unit cube \\([0, 1]^n\\) with uniform marginals, such that, for all \\((x_1, ..., x_n) \\in \\mathbf{R}^n\\):\n\\[\nF_{\\mathbf{X}}(x_1, ..., x_n) = C(F_{X_1}(x_1), ..., F_{X_n}(x_n)),\n\\]"
  },
  {
    "objectID": "rank_reordering.html#introduction",
    "href": "rank_reordering.html#introduction",
    "title": "A crash course on copulas",
    "section": "",
    "text": "We explore how to adjust independent simulations from marginal distributions in order to impose a desired dependence structure using a copula. This is useful when you have simulations from marginal distributions produced independently, but want to introduce a correlation structure between them using a copula chosen separately.\nThis is particularly relevant in the context of internal models for (re-)insurers, where individual risk types are typically modelled separately (by separate teams), and the risk aggregation is performed in a second step.\nWe note:\n\n\\(\\mathbf{X} = \\left( X_1, ..., X_n\\right)\\), \\(n \\in \\mathbf{N}^*\\), \\(n \\geq 2\\), a multivariate real-valued random vector\n\\(F_{X_i}\\) the marginal c.d.f. of \\(X_i\\) for all \\(i \\in \\{ 1, ..., n\\}\\)\n\\(C\\) the copula of \\(\\mathbf{X}\\)\n\nWe assume that we have simulations \\(\\left( x_{1,j}, ..., x_{n,j}\\right), j \\in \\{ 1, ..., S\\}\\), \\(S \\in \\mathbf{N}^*\\) being the number of simulations, generated with the expected marginal distributions \\(F_{X_1}, ..., F_{X_n}\\), but under the assumption that the vector components \\(X_1, ..., X_n\\) are independent.\nWe would like to adjust the simulations, so that the dependency structure between the vector components, i.e., the copula \\(C\\), is properly reflected.\nThe solution involves re-ordering the ranks of the simulations of the marginal distributions based on the ranks of samples from the copula."
  },
  {
    "objectID": "rank_reordering.html#algorithm",
    "href": "rank_reordering.html#algorithm",
    "title": "A crash course on copulas",
    "section": "2 Algorithm",
    "text": "2 Algorithm\nThe rank-reordering algorithm works as follows:\n\nStep 1:\n\nGenerate \\(S\\) simulations from the copula (i.e., as many simulations as produced for the marginal distributions)\nThese copula samples have uniform marginals with the desired dependency structure\n\nStep 2:\n\nFor each vector component, i.e., for each \\(i \\in \\{1, ..., n\\}\\), sort the simulations of \\(X_i\\) (i.e., the \\(x_{i,j}, j\\in \\{ 1, ..., S\\}\\)) and assign ranks to them\nThese ranks will be used to reorder the samples according to the dependence structure imposed by the copula\n\nStep 3:\n\nAfter generating the copula samples, re-order the marginal simulations to match the ranks of the copula samples\nThis step introduces the dependence between the variables while preserving their marginal distributions"
  },
  {
    "objectID": "rank_reordering.html#r-examples",
    "href": "rank_reordering.html#r-examples",
    "title": "A crash course on copulas",
    "section": "3 R examples",
    "text": "3 R examples\n\n3.1 Gaussian copula\nBelow is an R code example that implements this algorithm using independent normal and exponential marginal distributions, with a Gaussian copula to introduce dependence.\n\n# Load required libraries\nlibrary(MASS) # For the \"mvrnorm\" function\nlibrary(copula) # For copula functions\n\n# Step 1: Generate independent marginals\n# In a real-world context (e.g., as an actuary working on risk aggregation in an insurance company), the independent marginals are provided as inputs directly\nset.seed(1)\nn &lt;- 1000\n# Simulate from normal distribution\nX1 &lt;- rnorm(n, mean = 0, sd = 1)\n# Simulate from exponential distribution\nX2 &lt;- rexp(n, rate = 1)\n\n# Step 2: Simulate from a Gaussian copula with correlation = 0.6 (for example)\nrho &lt;- 0.6\n# Correlation matrix\nsigma &lt;- matrix(c(1, rho, rho, 1), 2, 2)  \ncopula_samples &lt;- mvrnorm(n, mu = c(0, 0), Sigma = sigma)\n\n# Convert to uniform samples using the standard Gaussian c.d.f.\nU1 &lt;- pnorm(copula_samples[, 1])\nU2 &lt;- pnorm(copula_samples[, 2])\n\n# Step 3: Rank the copula samples\nrank_U1 &lt;- rank(U1)\nrank_U2 &lt;- rank(U2)\n\n# Step 4: Sort the independent marginals\nsorted_X1 &lt;- sort(X1)\nsorted_X2 &lt;- sort(X2)\n\n# Step 5: Re-order the marginals according to the copula ranks\nX1_new &lt;- sorted_X1[rank_U1]\nX2_new &lt;- sorted_X2[rank_U2]\n\n# Now, X1_new and X2_new have the desired dependence structure from the copula\n# You can inspect the rank correlation between X1_new and X2_new:\n# empirical value: \ncor(X1_new, X2_new, method = \"spearman\")\n\n[1] 0.6023343\n\n# theoretical value:\nrho\n\n[1] 0.6\n\n\n\n\n3.2 Gumbel copula\nBelow is an R code example using independent gamma and student marginal distributions, with a Gumbel copula to introduce dependence.\n\n# Load required libraries\nlibrary(copula)\n\n# Step 1: Generate independent marginals\nset.seed(1)\nn &lt;- 1000\n# Shape parameter for Gamma distribution\nshape &lt;- 2\n# Rate parameter for Gamma distribution\nrate &lt;- 1\n# Degrees of freedom for Student's t-distribution\ndf &lt;- 5\n\n# Simulate from the Gamma distribution\nX1 &lt;- rgamma(n, shape = shape, rate = rate)\n# Simulate from the Student's t-distribution\nX2 &lt;- rt(n, df = df)\n\n# Step 2: Simulate from a Gumbel copula with theta = 4\ntheta &lt;- 4\ngumbel_copula &lt;- gumbelCopula(param = theta)\ncopula_samples &lt;- rCopula(n, gumbel_copula)\n\n# Convert to uniform samples (copula samples are already in uniform scale)\nU1 &lt;- copula_samples[, 1]\nU2 &lt;- copula_samples[, 2]\n\n# Step 3: Rank the copula samples\nrank_U1 &lt;- rank(U1)\nrank_U2 &lt;- rank(U2)\n\n# Step 4: Sort the independent marginals\nsorted_X1 &lt;- sort(X1)\nsorted_X2 &lt;- sort(X2)\n\n# Step 5: Reorder the marginals according to the copula ranks\nX1_new &lt;- sorted_X1[rank_U1]\nX2_new &lt;- sorted_X2[rank_U2]\n\n# Now X1_new and X2_new have the desired dependence structure from the copula\n# You can inspect the Kendall's tau between the new variables\n# empirical value: \ncor(X1_new, X2_new, method = \"kendall\")\n\n[1] 0.7427948\n\n# theoretical value (cf. section on the Gumbel copula):\n1 - 1/theta\n\n[1] 0.75"
  }
]